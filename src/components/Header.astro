---
import CLXD from "./icons/CLXDIcon.astro";
---

<header
  class="fixed top-0 w-full z-20 py-2 px-4 md:px-10 flex backdrop-blur-lg justify-between items-center text-sm md:text-lg text-[--text] bg-neutral-200/75 dark:bg-neutral-900/75"
>
</div>
  <div class="h-full gap-2 hidden md:flex items-center">
    <CLXD
      class="size-10 p-1 text-white fill-neutral-500 bg-[#121212] rounded-full"
    />
    <div>
      <h3>CLXD</h3>
      <h4>Frontend Developer</h4>
    </div>
  </div>

  <nav
    class="flex gap-2 md:gap-12 [&>ul]:p-1 [&>ul]:bg-[--background] [&>ul]:rounded-xl [&>ul]:flex [&>ul>li]:flex [&>ul>li]:items-center [&>ul>li]:text-center [&>ul>li>a]:inline-block [&>ul>li>a]:px-4 [&>ul>li>a]:py-2 [&>ul>li>a]:transition-colors font-medium"
  >
    <ul>
      <li><a href="#home">Inicio</a></li>
      <li><a href="#projects">Proyectos</a></li>
      <li><a href="#about">Sobre m√≠</a></li>
    </ul>
    <ul>
      <li><a href="/cv/cv.pdf">CV</a></li>
    </ul>
  </nav>

  <div
    id="nav-backdrop"
    class="absolute inset-0 opacity-0 pointer-events-none transition-all duration-500 ease-in-out bg-[--secondary] backdrop-blur-lg rounded-xl translate-x-[var(--left)] translate-y-[var(--top)] w-[var(--width)] h-[var(--height)]"
  >
  </div>
</header>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const $goToTopButton = document.querySelector("a[href='#home']");
    $goToTopButton?.addEventListener("click", () => {
      setTimeout(() => {
        window.scrollTo({ top: 0 });
      }, 100);
    });
    const $listItems = document.querySelectorAll("header li");
    const $navBackdrop = document.querySelector("#nav-backdrop");

    $listItems.forEach((item) => {
      item.addEventListener("mouseenter", () => {
        const { left, top, width, height } = item.getBoundingClientRect();

        $navBackdrop.style.setProperty("--left", `${left}px`);
        $navBackdrop.style.setProperty("--top", `${top}px`);
        $navBackdrop.style.setProperty("--width", `${width}px`);
        $navBackdrop.style.setProperty("--height", `${height}px`);

        $navBackdrop.style.opacity = "0.2";
        $navBackdrop.style.visibility = "visible";
      });

      item.addEventListener("mouseleave", () => {
        $navBackdrop.style.opacity = "0";
        $navBackdrop.style.visibility = "hidden";
      });
    });

    const navLinks = {
      home: document.querySelector('a[href="#home"]'),
      projects: document.querySelector('a[href="#projects"]'),
      about: document.querySelector('a[href="#about"]'),
    };

    const sections = {
      home: document.querySelector("#home"),
      projects: document.querySelector("#projects"),
      about: document.querySelector("#about"),
    };

    const observerOptions = {
      root: null,
      rootMargin: "20px",
      threshold: 0.3,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const { isIntersecting } = entry;
        if (isIntersecting) {
          Object.values(navLinks).forEach((link) =>
            link.classList.remove("text-[--secondary-500]")
          );
          const activeLink = navLinks[entry.target.id];
          activeLink.classList.add("text-[--secondary-500]");
          console.log(`${activeLink} change to new color`);
        }
      });
    }, observerOptions);

    Object.values(sections).forEach((section) => observer.observe(section));
  });
</script>
